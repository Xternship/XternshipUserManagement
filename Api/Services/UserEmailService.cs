using ApiGateway.Dtos;
using ApiGateway.Protos;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ApiGateway.Services
{
    public class UserEmailService : IUserEmailService
    {
        private readonly UserServiceProto.UserServiceProtoClient _userClient;
        private readonly EmailServiceProto.EmailServiceProtoClient _emailClient;

        public UserEmailService(
            UserServiceProto.UserServiceProtoClient userClient,
            EmailServiceProto.EmailServiceProtoClient emailClient)
        {
            _userClient = userClient;
            _emailClient = emailClient;
        }

        public async Task<ApiResponse> RegisterUserAndSendEmailAsync(RegisterUserDto request)
        {
            var userRequest = new RegisterUserRequest
            {
                Username = request.Username,
                Email = request.Email,
                FirstName = request.FirstName,
                LastName = request.LastName,
                Role = request.Role
            };

            var userResponse = await _userClient.RegisterUserAsync(userRequest);

            if (userResponse.Success)
            {
                try
                {
                    await _emailClient.SendEmailAsync(new SendEmailRequest
                    {
                        ToEmail = request.Email,
                        ToName = $"{request.FirstName} {request.LastName}",
                        Subject = "Your Credentials",
                        Body = $"Hello {request.FirstName},\n\nYour credentials are:\nUsername: {request.Username}\nPassword: [Your autogenerated password]\n\nBest Regards,\nYourApp Team"
                    });

                    return new ApiResponse
                    {
                        Success = true,
                        Message = "User registered and email sent successfully"
                    };
                }
                catch (Exception ex)
                {
                    return new ApiResponse
                    {
                        Success = false,
                        Message = $"User registered but failed to send email: {ex.Message}"
                    };
                }
            }

            return new ApiResponse
            {
                Success = false,
                Message = "User registration failed"
            };
        }

        public async Task<ApiResponse> RegisterUsersAndSendEmailsAsync(IEnumerable<RegisterUserDto> requests)
        {
            var registrationTasks = requests.Select(async request =>
            {
                var userRequest = new RegisterUserRequest
                {
                    Username = request.Username,
                    Email = request.Email,
                    FirstName = request.FirstName,
                    LastName = request.LastName,
                    Role = request.Role
                };

                var userResponse = await _userClient.RegisterUserAsync(userRequest);

                if (userResponse.Success)
                {
                    try
                    {
                        await _emailClient.SendEmailAsync(new SendEmailRequest
                        {
                            ToEmail = request.Email,
                            ToName = $"{request.FirstName} {request.LastName}",
                            Subject = "Your Credentials",
                            Body = $"Hello {request.FirstName},\n\nYour credentials are:\nUsername: {request.Username}\nPassword: [Your autogenerated password]\n\nBest Regards,\nYourApp Team"
                        });

                        return new ApiResponse
                        {
                            Success = true,
                            Message = $"User {request.Username} registered and email sent successfully"
                        };
                    }
                    catch (Exception ex)
                    {
                        return new ApiResponse
                        {
                            Success = false,
                            Message = $"User {request.Username} registered but failed to send email: {ex.Message}"
                        };
                    }
                }

                return new ApiResponse
                {
                    Success = false,
                    Message = $"User {request.Username} registration failed"
                };
            });

            var results = await Task.WhenAll(registrationTasks);

            return new ApiResponse
            {
                Success = results.All(r => r.Success),
                Message = results.All(r => r.Success) ? "All users registered and emails sent successfully" : "Some users registered but some emails failed to send"
            };
        }
    }
}
